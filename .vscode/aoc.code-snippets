{
	// Place your AoC workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Boilerplate": {
		"scope": "rust",
		"prefix": "sketch",
		"body": [
			"use crate::prelude::*;",
			"",
			"#[linkme::distributed_slice(SOLVERS)]",
			"static ITEM: Solver = Solver::new(${1:year}, ${2:day}, |t| t.parse_dyn_puzzle::<${3:Name}>());",
			"",
			"#[derive(Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]",
			"#[cfg_attr(feature = \"serde\", derive(serde::Serialize, serde::Deserialize))]",
			"pub struct ${3} {",
			"\t${4:state},",
			"}",
			"",
			"impl<'a> Parsed<&'a str> for ${3} {",
			"\tfn parse_wyz(text: &'a str) -> ParseResult<&'a str, Self> {",
			"\t\t${0:todo!()}",
			"\t}",
			"}",
			"",
			"impl Puzzle for ${3} {}",
			""
		],
		"description": "Sketch out the solver boilerplate"
	},
	"Derives": {
		"scope": "rust",
		"prefix": "mktraits",
		"body": [
			"#[derive(Clone, ${1:Copy, }Debug, ${2:Default, }Eq, Hash, Ord, PartialEq, PartialOrd)]",
			"#[cfg_attr(feature = \"serde\", derive(serde::Serialize, serde::Deserialize))]$0",
		]
	},
	"Parse": {
		"scope": "rust",
		"prefix": "mkparse",
		"body": [
			"impl<'a> Parsed<&'a str> for ${1:Name} {",
			"\tfn parse_wyz(text: &'a str) -> ParseResult<&'a str, Self> {",
			"\t\t${0:todo!()}",
			"\t}",
			"}",
			""
		]
	},
	"Show": {
		"scope": "rust",
		"prefix": "mkdisp",
		"body": [
			"impl fmt::Display for ${1:Name} {",
			"\tfn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {",
			"\t\t${0:todo!()}",
			"\t}",
			"}",
			""
		]
	}
}
